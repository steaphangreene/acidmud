// *************************************************************************
//  This file is part of AcidMUD by Steaphan Greene
//
//  Copyright 1999-2022 Steaphan Greene <steaphan@gmail.com>
//
//  AcidMUD is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
//
//  AcidMUD is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with AcidMUD (see the file named "COPYING");
//  If not, see <http://www.gnu.org/licenses/>.
//
// *************************************************************************

#include <algorithm>
#include <string>
#include <vector>

#include "color.hpp"
#include "commands.hpp"
#include "dice.hpp"
#include "global.hpp"
#include "infile.hpp"
#include "log.hpp"
#include "mind.hpp"
#include "net.hpp"
#include "object.hpp"
#include "properties.hpp"
#include "utils.hpp"
#include "version.hpp"

#define SIT_ETHEREAL 1
#define SIT_CORPOREAL 2
#define SIT_ALIVE 4
#define SIT_CONSCIOUS 8
#define SIT_AWAKE 16
#define SIT_ALERT 32
#define SIT_LIE 64
#define SIT_SIT 128
#define SIT_STAND 256
#define SIT_USE 512
#define SIT_ACTION 4096
#define SIT_NINJAMODE 8192
#define SIT_NINJA 16384
#define SIT_SUPERNINJA 32768

#define CMD_FLAVORTEXT 65536

#define REQ_ETHEREAL (SIT_ETHEREAL)
#define REQ_CORPOREAL (SIT_CORPOREAL)
#define REQ_ALIVE (SIT_ALIVE | REQ_CORPOREAL)
#define REQ_CONSCIOUS (SIT_CONSCIOUS | REQ_ALIVE)
#define REQ_AWAKE (SIT_AWAKE | REQ_CONSCIOUS)
#define REQ_ALERT (SIT_ALERT | REQ_AWAKE)
#define REQ_LIE (SIT_LIE | REQ_CORPOREAL)
#define REQ_SIT (SIT_SIT | REQ_CORPOREAL)
#define REQ_STAND (SIT_STAND | REQ_CORPOREAL)
#define REQ_UP (SIT_STAND | SIT_USE | REQ_CORPOREAL)

#define REQ_ACTION (SIT_ACTION | REQ_CORPOREAL)

#define REQ_NINJAMODE (SIT_NINJAMODE)
#define REQ_NINJA (SIT_NINJA)
#define REQ_SUPERNINJA (SIT_SUPERNINJA | SIT_NINJA)

#define REQ_ANY (SIT_CORPOREAL | SIT_ETHEREAL)

int handle_command_ccreate(Object*, std::shared_ptr<Mind>&, const std::u8string_view&, int, int);
int handle_command_wload(Object*, std::shared_ptr<Mind>&, const std::u8string_view&, int, int);
int handle_command_list(Object*, std::shared_ptr<Mind>&, int, const std::u8string_view&, int, int);
int handle_command_buy(Object*, std::shared_ptr<Mind>&, int, const std::u8string_view&, int, int);
int handle_command_shops(Object*, std::shared_ptr<Mind>&, int, const std::u8string_view&, int, int);
int handle_social_command(
    Object*,
    std::shared_ptr<Mind>&,
    int,
    const std::u8string_view&,
    int,
    int);
int handle_command_other(Object*, std::shared_ptr<Mind>&, int, std::u8string_view, int, int);

struct Command {
  std::u8string_view command;
  std::u8string_view shortdesc;
  std::u8string_view longdesc;
  int sit;
  com_t id;
};

constexpr static const Command comlist[COM_MAX + 1] = {
    {u8"", u8"", u8"", 0, COM_NONE},
    {u8"help",
     u8"Get help for a topic or command.",
     u8"Get help for a topic or command.",
     (REQ_ANY),
     COM_HELP},
    {u8"quit", u8"Quit the game.", u8"Quit the game.", (REQ_ANY), COM_QUIT},
    {u8"password",
     u8"Change player password.",
     u8"Change player password.",
     (REQ_ANY | CMD_FLAVORTEXT),
     COM_PASSWORD},

    {u8"north", u8"Travel north.", u8"Travel north.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_NORTH},
    {u8"south", u8"Travel south.", u8"Travel south.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_SOUTH},
    {u8"east", u8"Travel east.", u8"Travel east.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_EAST},
    {u8"west", u8"Travel west.", u8"Travel west.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_WEST},
    {u8"up", u8"Travel up.", u8"Travel up.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_UP},
    {u8"down", u8"Travel down.", u8"Travel down.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_DOWN},

    {u8"look",
     u8"Look around, look in a direction, or look at an object or creature.",
     u8"Look around, look in a direction, or look at an object or creature.",
     (REQ_AWAKE | REQ_ACTION | REQ_ETHEREAL),
     COM_LOOK},
    {u8"examine",
     u8"Examine an object or creature.",
     u8"Examine an object or creature.",
     (REQ_ALERT | REQ_ACTION),
     COM_EXAMINE},
    {u8"consider",
     u8"Consider attacking someone, or using something, and size it up.",
     u8"Consider attacking someone, or using something, and size it up.",
     (REQ_ALERT | REQ_ACTION),
     COM_CONSIDER},
    {u8"inventory",
     u8"Check what you have on you.",
     u8"Check what you have on you.",
     (REQ_AWAKE | REQ_ACTION),
     COM_INVENTORY},
    {u8"equipment",
     u8"Check what you are wearing and using.",
     u8"Check what you are wearing and using.",
     (REQ_AWAKE | REQ_ACTION),
     COM_EQUIPMENT},
    {u8"search",
     u8"Search an area, object or creature.",
     u8"Search an area, object or creature.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_SEARCH},
    {u8"hide",
     u8"Hide an object, or yourself.",
     u8"Hide an object, or yourself.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_HIDE},

    {u8"leave",
     u8"Leave an object.",
     u8"Leave an object.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_LEAVE},
    {u8"enter",
     u8"Enter an object (or enter the game).",
     u8"Enter an object (or enter the game).",
     (REQ_ETHEREAL | REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_ENTER},
    {u8"select",
     u8"Select an unfinished character.",
     u8"Select an unfinished character.",
     (REQ_ETHEREAL),
     COM_SELECT},

    {u8"open",
     u8"Open a door or container.",
     u8"Open a door or container.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_OPEN},
    {u8"close",
     u8"Close a door or container.",
     u8"Close a door or container.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_CLOSE},
    {u8"unlock",
     u8"Unlock a door or container.",
     u8"Unlock a door or container.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_UNLOCK},
    {u8"lock",
     u8"Lock a door or container.",
     u8"Lock a door or container.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_LOCK},

    {u8"get",
     u8"Get an item from your surroundings.",
     u8"Get an item from your surroundings.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_GET},
    {u8"hold",
     u8"Hold an item you are carrying in your off-hand.",
     u8"Hold an item you are carrying in your off-hand.",
     (REQ_ALERT | REQ_ACTION),
     COM_HOLD},
    {u8"offer",
     u8"Offer to give your held item to someone, or stop offering.",
     u8"Offer to give your held item to someone, or stop offering.",
     (REQ_ALERT | REQ_ACTION),
     COM_OFFER},

    {u8"drag",
     u8"Drag a heavy item with you when you next move.",
     u8"Drag a heavy item with you when you next move.",
     (REQ_ALERT | REQ_STAND | REQ_ACTION),
     COM_DRAG},
    {u8"put",
     u8"Put a held item in or on something.",
     u8"Put a held item in or on something.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_PUT},
    {u8"drop",
     u8"Drop an item you are carrying.",
     u8"Drop an item you are carrying.",
     (REQ_ALERT),
     COM_DROP},
    {u8"stash",
     u8"Store an item you are holding in one of your containers.",
     u8"Store an item you are holding in one of your containers.",
     (REQ_ALERT | REQ_ACTION),
     COM_STASH},
    {u8"wield",
     u8"Wield a weapon you are carrying.",
     u8"Wield a weapon you are carrying.",
     (REQ_ALERT | REQ_ACTION),
     COM_WIELD},
    {u8"unwield",
     u8"Unwield the weapon you are currently wielding.",
     u8"Unwield the weapon you are currently wielding.",
     (REQ_ALERT | REQ_ACTION),
     COM_UNWIELD},
    {u8"light",
     u8"Light an item you are carrying and hold it in your off-hand.",
     u8"Light an item you are carrying and hold it in your off-hand.",
     (REQ_ALERT | REQ_ACTION),
     COM_LIGHT},
    {u8"wear",
     u8"Wear an item you are carrying.",
     u8"Wear an item you are carrying.",
     (REQ_ALERT | REQ_ACTION),
     COM_WEAR},
    {u8"remove",
     u8"Remove an item you are wearing.",
     u8"Remove an item you are wearing.",
     (REQ_ALERT | REQ_ACTION),
     COM_REMOVE},
    {u8"label",
     u8"Label, or read the label of, an item you are holding.",
     u8"Label, or read the label of, an item you are holding.",
     (REQ_ALERT | REQ_ACTION | CMD_FLAVORTEXT),
     COM_LABEL},
    {u8"unlabel",
     u8"Remove the label the item you are holding.",
     u8"Remove the label the item you are holding.",
     (REQ_ALERT | REQ_ACTION),
     COM_UNLABEL},
    {u8"heal",
     u8"Use healing/first-aid skills to help another, or yourself.",
     u8"Use healing/first-aid skills to help another, or yourself.",
     (REQ_CORPOREAL | REQ_ACTION),
     COM_HEAL},

    {u8"sleep", u8"Go to sleep.", u8"Go to sleep.", (REQ_CONSCIOUS | REQ_ACTION), COM_SLEEP},
    {u8"wake",
     u8"Wake up, or wake someone else up.",
     u8"Wake up, or wake someone else up.",
     (REQ_CONSCIOUS | REQ_ACTION),
     COM_WAKE},
    {u8"lie", u8"Lie down.", u8"Lie down.", (REQ_CONSCIOUS | REQ_ACTION), COM_LIE},
    {u8"rest", u8"Relax and rest.", u8"Relax and rest.", (REQ_CONSCIOUS | REQ_ACTION), COM_REST},
    {u8"sit", u8"Sit down.", u8"Sit down.", (REQ_CONSCIOUS | REQ_ACTION), COM_SIT},
    {u8"stand", u8"Stand up.", u8"Stand up.", (REQ_CONSCIOUS | REQ_ACTION), COM_STAND},
    {u8"use",
     u8"Start, or stop using a skill.",
     u8"Start, or stop using a skill.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_USE},
    {u8"stop",
     u8"Stop using a skill.",
     u8"Stop using a skill.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_STOP},
    {u8"cast", u8"Cast a spell.", u8"Cast a spell.", (REQ_ALERT | REQ_UP | REQ_ACTION), COM_CAST},
    {u8"pray",
     u8"Use faith to enhance another command.",
     u8"Use faith to enhance another command.",
     (REQ_ALERT | REQ_UP | REQ_ACTION),
     COM_PRAY},

    {u8"shout",
     u8"Shout something to all nearby.",
     u8"Shout something to all nearby.",
     (REQ_AWAKE | CMD_FLAVORTEXT),
     COM_SHOUT},
    {u8"yell",
     u8"Shout something to all nearby.",
     u8"Shout something to all nearby.",
     (REQ_AWAKE | CMD_FLAVORTEXT),
     COM_YELL},
    {u8"call",
     u8"Shout something to all nearby.",
     u8"Shout something to all nearby.",
     (REQ_AWAKE | CMD_FLAVORTEXT),
     COM_CALL},
    {u8"say", u8"Say something.", u8"Say something.", (REQ_AWAKE | CMD_FLAVORTEXT), COM_SAY},
    {u8"emote",
     u8"Indicate to others that you are doing something.",
     u8"Indicate to others that you are doing something.",
     (REQ_AWAKE | CMD_FLAVORTEXT),
     COM_EMOTE},
    {u8"introduce",
     u8"Indroduce yourself, or someone or something else, to others.",
     u8"Indroduce yourself, or someone or something else, to others.",
     (REQ_AWAKE | CMD_FLAVORTEXT),
     COM_INTRODUCE},

    {u8"eat",
     u8"Eat an item you are carrying.",
     u8"Eat an item you are carrying.",
     (REQ_ALERT | REQ_ACTION),
     COM_EAT},
    {u8"drink",
     u8"Drink from an item you are carrying.",
     u8"Drink from an item you are carrying.",
     (REQ_ALERT | REQ_ACTION),
     COM_DRINK},
    {u8"fill",
     u8"Fill a held liquid container from another.",
     u8"Fill a held liquid container from another.",
     (REQ_ALERT | REQ_ACTION),
     COM_FILL},
    {u8"dump",
     u8"Dump all liquid out of a container you are carrying.",
     u8"Dump all liquid out of a container you are carrying.",
     (REQ_ALERT | REQ_ACTION),
     COM_DUMP},

    {u8"point",
     u8"Point at an object, or stop pointing.",
     u8"Point at an object, or stop pointing.",
     (REQ_ALERT),
     COM_POINT},
    {u8"follow",
     u8"Follow someone, or stop following someone.",
     u8"Follow someone, or stop following someone.",
     (REQ_ALERT | REQ_UP),
     COM_FOLLOW},
    {u8"attack",
     u8"Attack somebody, or an object.",
     u8"Attack somebody, or an object.",
     (REQ_ALERT | REQ_ACTION | REQ_STAND),
     COM_ATTACK},
    {u8"kill",
     u8"Try to kill somebody, or smash an object.",
     u8"Try to kill somebody, or smash an object.",
     (REQ_ALERT | REQ_ACTION | REQ_STAND),
     COM_KILL},
    {u8"punch",
     u8"Punch somebody, or an object.",
     u8"Punch somebody, or an object.",
     (REQ_ALERT | REQ_ACTION | REQ_STAND),
     COM_PUNCH},
    {u8"kick",
     u8"Kick somebody, or an object.",
     u8"Kick somebody, or an object.",
     (REQ_ALERT | REQ_ACTION | REQ_STAND),
     COM_KICK},
    {u8"flee",
     u8"Escape the area as fast as you can, in a random direction.",
     u8"Escape the area as fast as you can, in a random direction.",
     (REQ_ALERT | REQ_ACTION | REQ_UP),
     COM_FLEE},

    {u8"list",
     u8"List items available at a shop.",
     u8"List items available at a shop.",
     (REQ_ALERT | REQ_ACTION),
     COM_LIST},
    {u8"buy",
     u8"Buy an item at a shop.",
     u8"Buy an item at a shop.",
     (REQ_ALERT | REQ_ACTION),
     COM_BUY},
    {u8"value",
     u8"Find out how much a shop will give you for an item.",
     u8"Find out how much a shop will give you for an item.",
     (REQ_ALERT | REQ_ACTION),
     COM_VALUE},
    {u8"sell",
     u8"Sell an item at a shop.",
     u8"Sell an item at a shop.",
     (REQ_ALERT | REQ_ACTION),
     COM_SELL},

    {u8"toggle",
     u8"Turn options on and off, or show current options setting.",
     u8"Turn options on and off, or show current options setting.",
     (REQ_ANY),
     COM_TOGGLE},

    {u8"who",
     u8"Get a list of who is on the MUD right now.",
     u8"Get a list of who is on the MUD right now.",
     (REQ_ANY),
     COM_WHO},
    {u8"ooc",
     u8"Toggle or use ooc (Out-Of-Character) chat.",
     u8"Toggle or use ooc (Out-Of-Character) chat.",
     (REQ_ANY | CMD_FLAVORTEXT),
     COM_OOC},
    {u8"newbie",
     u8"Toggle or use newbie (new player) chat (use this to ask for help).",
     u8"Toggle or use newbie (new player) chat (use this to ask for help).",
     (REQ_ANY | CMD_FLAVORTEXT),
     COM_NEWBIE},

    {u8"newcharacter",
     u8"Create a new character.",
     u8"Create a new character.",
     (REQ_ETHEREAL | CMD_FLAVORTEXT),
     COM_NEWCHARACTER},
    {u8"raise",
     u8"Spend a skill or attribute point of current character.",
     u8"Spend a skill or attribute point of current character.",
     (REQ_ETHEREAL | REQ_CORPOREAL),
     COM_RAISE},
    {u8"lower",
     u8"Lower a skill or attribute point of current in-progress character.",
     u8"Lower a skill or attribute point of current in-progress character.",
     (REQ_ETHEREAL),
     COM_LOWER},
    {u8"resetcharacter",
     u8"Undo (erase!) *all* work on in-progress character.",
     u8"Undo (erase!) *all* work on in-progress character.",
     (REQ_ETHEREAL),
     COM_RESETCHARACTER},
    {u8"randomize",
     u8"Spend all remaining points of current character randomly.",
     u8"Spend all remaining points of current character randomly.",
     (REQ_ETHEREAL),
     COM_RANDOMIZE},
    {u8"archetype",
     u8"Replace (erase!) *all* work on in-progress character with preset.",
     u8"Replace (erase!) *all* work on in-progress character with preset.",
     (REQ_ETHEREAL),
     COM_ARCHETYPE},
    {u8"score",
     u8"Get your current character and/or player's stats and score.",
     u8"Get your current character and/or player's stats and score.",
     (REQ_ETHEREAL | REQ_CORPOREAL),
     COM_SCORE},

    {u8"time",
     u8"Get the current world's MUD time.",
     u8"Get the current world's MUD time.",
     (REQ_ETHEREAL | REQ_CORPOREAL),
     COM_TIME},
    {u8"world",
     u8"Get the name of the current world.",
     u8"Get the name of the current world.",
     (REQ_ETHEREAL | REQ_CORPOREAL),
     COM_WORLD},
    {u8"zone",
     u8"Get the name of the current zone.",
     u8"Get the name of the current zone.",
     (REQ_CORPOREAL),
     COM_ZONE},
    {u8"version",
     u8"Query the version information of running AcidMUD.",
     u8"Query the version information of running AcidMUD.",
     (REQ_ANY),
     COM_VERSION},

    {u8"skilllist",
     u8"List all available skill categories, or all skills in a category.",
     u8"List all available skill categories, or all skills in a category.",
     (REQ_ANY),
     COM_SKILLLIST},

    {u8"recall",
     u8"Teleport back to the start when you are uninjured.",
     u8"Teleport back to the start when you are uninjured.",
     (REQ_STAND),
     COM_RECALL},
    {u8"teleport",
     u8"Teleport to a named location (requires a power to enable).",
     u8"Teleport to a named location (requires a power to enable).",
     (REQ_STAND),
     COM_TELEPORT},
    {u8"resurrect",
     u8"Resurrect a long-dead character (one with no corpse left).",
     u8"Resurrect a long-dead character (one with no corpse left).",
     (REQ_STAND),
     COM_RESURRECT},

    {u8"ninjamode",
     u8"Ninja command: run a command in Ninja Mode[TM].",
     u8"Ninja command: run a command in Ninja Mode[TM].",
     (REQ_ETHEREAL | REQ_ANY | REQ_ACTION | REQ_NINJA | CMD_FLAVORTEXT),
     COM_NINJAMODE},
    {u8"makeninja",
     u8"Ninja command: make (or unmake) another player into a True Ninja[TM].",
     u8"Ninja command: make (or unmake) another player into a True Ninja[TM].",
     (REQ_ANY | REQ_SUPERNINJA | REQ_NINJAMODE),
     COM_MAKENINJA},
    {u8"makesuperninja",
     u8"Ninja command: make (or unmake) a True Ninja into a Super Ninja[TM].",
     u8"Ninja command: make (or unmake) a True Ninja into a Super Ninja[TM].",
     (REQ_ANY | REQ_SUPERNINJA | REQ_NINJAMODE),
     COM_MAKESUPERNINJA},

    {u8"create",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_CREATE},
    {u8"dcreate",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_DCREATE},
    {u8"ccreate",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_CCREATE},
    {u8"wload",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_WLOAD},
    {u8"anchor",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_ANCHOR},
    {u8"link",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_LINK},
    {u8"connect",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_CONNECT},
    {u8"command",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_CORPOREAL | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_COMMAND},
    {u8"control",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_CORPOREAL | REQ_NINJAMODE),
     COM_CONTROL},
    {u8"clone",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_CLONE},
    {u8"mirror",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_MIRROR},
    {u8"junk",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_JUNK},
    {u8"prod",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_PROD},
    {u8"reset",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_RESET},

    {u8"players",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ANY | REQ_NINJAMODE),
     COM_PLAYERS},
    {u8"delplayer",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ANY | REQ_NINJAMODE),
     COM_DELPLAYER},
    {u8"characters",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ANY | REQ_NINJAMODE),
     COM_CHARACTERS},

    {u8"jack",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_JACK},
    {u8"chump",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_CHUMP},
    {u8"increment",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_INCREMENT},
    {u8"decrement",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_DECREMENT},
    {u8"double",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_DOUBLE},

    {u8"setstats",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_SETSTATS},
    {u8"brief",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_BRIEF},
    {u8"name",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_NAME},
    {u8"unname",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_UNNAME},
    {u8"undescribe",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_UNDESCRIBE},
    {u8"describe",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_DESCRIBE},
    {u8"undefine",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_UNDEFINE},
    {u8"define",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_DEFINE},

    {u8"stats",
     u8"Ninja command: Get stats of a character, object or creature.",
     u8"Ninja command: Get stats of a character, object or creature.",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_STATS},

    {u8"shutdown",
     u8"Ninja command: shutdown the entire MUD.",
     u8"Ninja command: shutdown the entire MUD.",
     (REQ_ANY | REQ_NINJAMODE),
     COM_SHUTDOWN},
    {u8"restart",
     u8"Ninja command: restart the entire MUD - preserving connections.",
     u8"Ninja command: restart the entire MUD - preserving connections.",
     (REQ_ANY | REQ_NINJAMODE),
     COM_RESTART},
    {u8"saveall",
     u8"Ninja command: save the entire MUD Universe - preserving connections.",
     u8"Ninja command: save the entire MUD Universe - preserving connections.",
     (REQ_ANY | REQ_NINJAMODE),
     COM_SAVEALL},

    {u8"makestart",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_MAKESTART},

    {u8"tload",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE | CMD_FLAVORTEXT),
     COM_TLOAD},
    {u8"tclean",
     u8"Ninja command.",
     u8"Ninja command - ninjas only!",
     (REQ_ALERT | REQ_NINJAMODE),
     COM_TCLEAN},

    // These are all autogenerated from tba/socials.new
    COM_SOCIAL,
    {u8"", u8"", u8"", 0, COM_MAX},
};

static_assert(comlist[COM_NONE].id == COM_NONE);
static_assert(comlist[COM_HELP].id == COM_HELP);
static_assert(comlist[COM_QUIT].id == COM_QUIT);
static_assert(comlist[COM_PASSWORD].id == COM_PASSWORD);
static_assert(comlist[COM_NORTH].id == COM_NORTH);
static_assert(comlist[COM_SOUTH].id == COM_SOUTH);
static_assert(comlist[COM_EAST].id == COM_EAST);
static_assert(comlist[COM_WEST].id == COM_WEST);
static_assert(comlist[COM_UP].id == COM_UP);
static_assert(comlist[COM_DOWN].id == COM_DOWN);
static_assert(comlist[COM_LOOK].id == COM_LOOK);
static_assert(comlist[COM_EXAMINE].id == COM_EXAMINE);
static_assert(comlist[COM_CONSIDER].id == COM_CONSIDER);
static_assert(comlist[COM_INVENTORY].id == COM_INVENTORY);
static_assert(comlist[COM_EQUIPMENT].id == COM_EQUIPMENT);
static_assert(comlist[COM_SEARCH].id == COM_SEARCH);
static_assert(comlist[COM_HIDE].id == COM_HIDE);
static_assert(comlist[COM_LEAVE].id == COM_LEAVE);
static_assert(comlist[COM_ENTER].id == COM_ENTER);
static_assert(comlist[COM_SELECT].id == COM_SELECT);
static_assert(comlist[COM_OPEN].id == COM_OPEN);
static_assert(comlist[COM_CLOSE].id == COM_CLOSE);
static_assert(comlist[COM_UNLOCK].id == COM_UNLOCK);
static_assert(comlist[COM_LOCK].id == COM_LOCK);
static_assert(comlist[COM_GET].id == COM_GET);
static_assert(comlist[COM_DRAG].id == COM_DRAG);
static_assert(comlist[COM_PUT].id == COM_PUT);
static_assert(comlist[COM_DROP].id == COM_DROP);
static_assert(comlist[COM_STASH].id == COM_STASH);
static_assert(comlist[COM_WIELD].id == COM_WIELD);
static_assert(comlist[COM_UNWIELD].id == COM_UNWIELD);
static_assert(comlist[COM_HOLD].id == COM_HOLD);
static_assert(comlist[COM_OFFER].id == COM_OFFER);
static_assert(comlist[COM_LIGHT].id == COM_LIGHT);
static_assert(comlist[COM_WEAR].id == COM_WEAR);
static_assert(comlist[COM_REMOVE].id == COM_REMOVE);
static_assert(comlist[COM_LABEL].id == COM_LABEL);
static_assert(comlist[COM_UNLABEL].id == COM_UNLABEL);
static_assert(comlist[COM_HEAL].id == COM_HEAL);
static_assert(comlist[COM_SLEEP].id == COM_SLEEP);
static_assert(comlist[COM_WAKE].id == COM_WAKE);
static_assert(comlist[COM_LIE].id == COM_LIE);
static_assert(comlist[COM_REST].id == COM_REST);
static_assert(comlist[COM_SIT].id == COM_SIT);
static_assert(comlist[COM_STAND].id == COM_STAND);
static_assert(comlist[COM_USE].id == COM_USE);
static_assert(comlist[COM_STOP].id == COM_STOP);
static_assert(comlist[COM_CAST].id == COM_CAST);
static_assert(comlist[COM_PRAY].id == COM_PRAY);
static_assert(comlist[COM_SHOUT].id == COM_SHOUT);
static_assert(comlist[COM_YELL].id == COM_YELL);
static_assert(comlist[COM_CALL].id == COM_CALL);
static_assert(comlist[COM_SAY].id == COM_SAY);
static_assert(comlist[COM_EMOTE].id == COM_EMOTE);
static_assert(comlist[COM_INTRODUCE].id == COM_INTRODUCE);
static_assert(comlist[COM_EAT].id == COM_EAT);
static_assert(comlist[COM_DRINK].id == COM_DRINK);
static_assert(comlist[COM_FILL].id == COM_FILL);
static_assert(comlist[COM_DUMP].id == COM_DUMP);
static_assert(comlist[COM_POINT].id == COM_POINT);
static_assert(comlist[COM_FOLLOW].id == COM_FOLLOW);
static_assert(comlist[COM_ATTACK].id == COM_ATTACK);
static_assert(comlist[COM_KILL].id == COM_KILL);
static_assert(comlist[COM_PUNCH].id == COM_PUNCH);
static_assert(comlist[COM_KICK].id == COM_KICK);
static_assert(comlist[COM_FLEE].id == COM_FLEE);
static_assert(comlist[COM_LIST].id == COM_LIST);
static_assert(comlist[COM_BUY].id == COM_BUY);
static_assert(comlist[COM_VALUE].id == COM_VALUE);
static_assert(comlist[COM_SELL].id == COM_SELL);
static_assert(comlist[COM_TOGGLE].id == COM_TOGGLE);
static_assert(comlist[COM_WHO].id == COM_WHO);
static_assert(comlist[COM_OOC].id == COM_OOC);
static_assert(comlist[COM_NEWBIE].id == COM_NEWBIE);
static_assert(comlist[COM_NEWCHARACTER].id == COM_NEWCHARACTER);
static_assert(comlist[COM_RAISE].id == COM_RAISE);
static_assert(comlist[COM_LOWER].id == COM_LOWER);
static_assert(comlist[COM_RESETCHARACTER].id == COM_RESETCHARACTER);
static_assert(comlist[COM_RANDOMIZE].id == COM_RANDOMIZE);
static_assert(comlist[COM_ARCHETYPE].id == COM_ARCHETYPE);
static_assert(comlist[COM_SCORE].id == COM_SCORE);
static_assert(comlist[COM_TIME].id == COM_TIME);
static_assert(comlist[COM_WORLD].id == COM_WORLD);
static_assert(comlist[COM_ZONE].id == COM_ZONE);
static_assert(comlist[COM_VERSION].id == COM_VERSION);
static_assert(comlist[COM_SKILLLIST].id == COM_SKILLLIST);
static_assert(comlist[COM_RECALL].id == COM_RECALL);
static_assert(comlist[COM_TELEPORT].id == COM_TELEPORT);
static_assert(comlist[COM_RESURRECT].id == COM_RESURRECT);
static_assert(comlist[COM_NINJAMODE].id == COM_NINJAMODE);
static_assert(comlist[COM_MAKENINJA].id == COM_MAKENINJA);
static_assert(comlist[COM_MAKESUPERNINJA].id == COM_MAKESUPERNINJA);
static_assert(comlist[COM_CREATE].id == COM_CREATE);
static_assert(comlist[COM_DCREATE].id == COM_DCREATE);
static_assert(comlist[COM_CCREATE].id == COM_CCREATE);
static_assert(comlist[COM_WLOAD].id == COM_WLOAD);
static_assert(comlist[COM_ANCHOR].id == COM_ANCHOR);
static_assert(comlist[COM_LINK].id == COM_LINK);
static_assert(comlist[COM_CONNECT].id == COM_CONNECT);
static_assert(comlist[COM_COMMAND].id == COM_COMMAND);
static_assert(comlist[COM_CONTROL].id == COM_CONTROL);
static_assert(comlist[COM_CLONE].id == COM_CLONE);
static_assert(comlist[COM_MIRROR].id == COM_MIRROR);
static_assert(comlist[COM_JUNK].id == COM_JUNK);
static_assert(comlist[COM_PROD].id == COM_PROD);
static_assert(comlist[COM_RESET].id == COM_RESET);
static_assert(comlist[COM_PLAYERS].id == COM_PLAYERS);
static_assert(comlist[COM_DELPLAYER].id == COM_DELPLAYER);
static_assert(comlist[COM_CHARACTERS].id == COM_CHARACTERS);
static_assert(comlist[COM_JACK].id == COM_JACK);
static_assert(comlist[COM_CHUMP].id == COM_CHUMP);
static_assert(comlist[COM_INCREMENT].id == COM_INCREMENT);
static_assert(comlist[COM_DECREMENT].id == COM_DECREMENT);
static_assert(comlist[COM_DOUBLE].id == COM_DOUBLE);
static_assert(comlist[COM_SETSTATS].id == COM_SETSTATS);
static_assert(comlist[COM_BRIEF].id == COM_BRIEF);
static_assert(comlist[COM_NAME].id == COM_NAME);
static_assert(comlist[COM_UNNAME].id == COM_UNNAME);
static_assert(comlist[COM_UNDESCRIBE].id == COM_UNDESCRIBE);
static_assert(comlist[COM_DESCRIBE].id == COM_DESCRIBE);
static_assert(comlist[COM_UNDEFINE].id == COM_UNDEFINE);
static_assert(comlist[COM_DEFINE].id == COM_DEFINE);
static_assert(comlist[COM_STATS].id == COM_STATS);
static_assert(comlist[COM_SHUTDOWN].id == COM_SHUTDOWN);
static_assert(comlist[COM_RESTART].id == COM_RESTART);
static_assert(comlist[COM_SAVEALL].id == COM_SAVEALL);
static_assert(comlist[COM_MAKESTART].id == COM_MAKESTART);
static_assert(comlist[COM_TLOAD].id == COM_TLOAD);
static_assert(comlist[COM_TCLEAN].id == COM_TCLEAN);
static_assert(comlist[COM_MAX].id == COM_MAX);

com_t identify_command(const std::u8string_view str, bool corporeal) {
  for (int ctr = 1; comlist[ctr].id != COM_MAX; ++ctr) {
    if (comlist[ctr].sit & SIT_NINJAMODE)
      continue; // Don't match ninja commands here

    if (!corporeal && (!(comlist[ctr].sit & SIT_ETHEREAL)))
      continue; // Don't match between modes

    if (corporeal && (!(comlist[ctr].sit & SIT_CORPOREAL)))
      continue; // Don't match between modes

    if (str == comlist[ctr].command.substr(0, str.length())) {
      return com_t(ctr); // Not .id - as all social commands share the same one.
    }
    // Command Aliases
    if (comlist[ctr].id == COM_SAY && (str[0] == '\'' || str[0] == '"')) {
      return comlist[ctr].id;
    }
    if (comlist[ctr].id == COM_DUMP &&
        str == std::u8string_view(u8"empty").substr(0, str.length())) {
      return comlist[ctr].id;
    }
    if (comlist[ctr].id == COM_GET && str == std::u8string_view(u8"take").substr(0, str.length())) {
      return comlist[ctr].id;
    }
  }
  return COM_NONE;
}

// Return values: -1: Player D/Ced
//                0: Command Understood
//                1: Command NOT Understood
//                2: Command Understood - No More Actions This Round
static int handle_single_command(Object* body, std::u8string line, std::shared_ptr<Mind> mind) {
  std::u8string_view cmd = line;
  std::u8string_view args = line;
  std::u8string args_buf;

  auto c1 = cmd.find_first_not_of(u8" \t\n\r;");
  if (c1 == std::u8string::npos) {
    return 1;
  }

  auto c2 = cmd.find_first_of(u8" \t\n\r;", c1 + 1);
  if (c2 == std::u8string::npos) {
    cmd = cmd.substr(c1);
  } else {
    cmd = cmd.substr(c1, c2 - c1);
  }

  // Lowercase the command portion, and only that portion, for now.
  auto clen = cmd.find_first_not_of(u8"abcdefghijklmnopqrstuvwxyz");
  if (clen != std::u8string::npos && clen < cmd.length() && ascii_isupper(cmd[clen])) {
    if (c2 == std::u8string::npos) {
      std::transform(line.begin(), line.end(), line.begin(), ascii_tolower);
    } else {
      std::transform(line.begin(), line.begin() + c2 + 1, line.begin(), ascii_tolower);
    }
  }

  if ((!body) && (!mind)) { // Nobody doing something?
    loge(u8"Warning: absolutely nobody tried to '{}'.", line);
    return 0;
  }

  if (cmd.empty() || cmd.front() == '#')
    return 0;

  if (mind && mind->Type() == mind_t::REMOTE && (!mind->Owner())) {
    if (mind->PName() != u8"")
      mind->SetPPass(std::u8string(cmd));
    else {
      int ctr;
      for (ctr = 0; ctr < int(cmd.length()); ++ctr) {
        if (!(ascii_isalnum(cmd[ctr]) || cmd[ctr] == ' ')) {
          mind->Send(
              u8"Name '{}' is invalid.\nNames can only have letters, numbers, and spaces.\n", cmd);
          loge(u8"Name '{}' is invalid.\nNames can only have letters, numbers, and spaces.", cmd);
          break;
        }
      }
      if (ctr == int(cmd.length()))
        mind->SetPName(std::u8string(cmd));
    }
    return 0;
  }

  int ninja = 0, sninja = 0, nmode = 0;
  if (mind && mind->Owner() && mind->Owner()->Is(PLAYER_SUPERNINJA)) {
    sninja = 1;
    ninja = 1;
  } else if (mind && mind->Owner() && mind->Owner()->Is(PLAYER_NINJA)) {
    ninja = 1;
  }
  if (mind && mind->Owner() && mind->Owner()->Is(PLAYER_NINJAMODE)) {
    nmode = LOC_NINJA;
  }

  int cnum = identify_command(cmd, (body != nullptr));
  if (cnum == COM_NONE && nmode) { // Now match ninja commands (for ninjas)
    for (int ctr = 1; comlist[ctr].id != COM_MAX; ++ctr) {
      if ((comlist[ctr].sit & SIT_NINJAMODE) &&
          cmd == comlist[ctr].command.substr(0, cmd.length())) {
        cnum = ctr;
        break;
      }
      if (comlist[ctr].id == COM_CHARACTERS &&
          cmd == std::u8string_view(u8"chars").substr(0, cmd.length())) {
        cnum = ctr;
        break;
      }
    }
  }

  // Lowercase the entire command, for non-flavortext commands.
  if (cnum != COM_NONE && (comlist[cnum].sit & CMD_FLAVORTEXT) == 0) {
    auto fclen = line.find_first_of(u8"ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    if (fclen != std::u8string::npos && fclen < line.length()) {
      std::transform(line.begin(), line.end(), line.begin(), ascii_tolower);
    }
  }

  if (c2 == std::u8string::npos) {
    args = u8"";
  } else {
    auto a1 = args.find_first_not_of(u8" \t\n\r;", c2 + 1);
    if (a1 == std::u8string::npos) {
      args = u8"";
    } else {
      args = args.substr(a1);
    }
  }

  if ((!nmode) && cnum != COM_RECALL && body && body->Parent()) {
    DArr64<Object*> items;
    Object* room = body->PickObject(u8"here", LOC_HERE);
    auto items2 = body->PickObjects(u8"everything", LOC_INTERNAL | LOC_NEARBY);
    auto items3 = body->PickObjects(u8"everyone", LOC_NEARBY);
    items.reserve(items2.size() + items3.size() + (room != nullptr));
    if (room != nullptr)
      items.push_back(room);
    items.insert(items.end(), items2.begin(), items2.end());
    items.insert(items.end(), items3.begin(), items3.end());

    for (auto obj : items) {
      auto trigs = obj->PickObjects(u8"all tbamud trigger script", LOC_NINJA | LOC_INTERNAL);
      for (auto trig : trigs) {
        if (trig->Skill(prhash(u8"TBAScriptType")) & 0x04) { // *-COMMAND trigs
          if ((cnum == COM_NONE &&
               cmd == std::u8string_view(trig->Desc()).substr(0, cmd.length())) ||
              (cnum && cnum == identify_command(trig->Desc(), true))) {
            if (trig->Skill(prhash(u8"TBAScriptType")) & 0x2000000) { // OBJ
              int narg = trig->Skill(prhash(u8"TBAScriptNArg"));
              if ((narg & 3) == 0 && body->HasWithin(obj)) {
                continue;
              } else if ((narg & 3) == 2 && body->Wearing(obj)) {
                continue;
              } else if ((narg & 3) == 1 && (!body->Wearing(obj))) {
                continue;
              }
              if ((narg & 4) == 0 && (!body->HasWithin(obj))) {
                continue;
              }
            }
            std::u8string cmln;
            if (cnum != COM_NONE) {
              cmln = fmt::format(u8"{} {}", comlist[cnum].command, args);
            } else {
              cmln = fmt::format(u8"{} {}", trig->Desc(), args);
            }
            if (!new_trigger(0, trig, body, cmln)) {
              return 0; // Handled, unless script says not.
            }
          }
        }
      }
    }
  }
  if (cnum == COM_NONE) { // Unknown, and not trigger-supported, command
    if (mind)
      mind->Send(u8"Command NOT understood - type 'help' for assistance.\n");
    return 1;
  }

  if ((!sninja) && (comlist[cnum].sit & SIT_SUPERNINJA)) {
    if (mind)
      mind->Send(u8"Sorry, that command is for Super Ninjas only!\n");
    return 0;
  }

  if ((!ninja) && (comlist[cnum].sit & SIT_NINJA)) {
    if (mind)
      mind->Send(u8"Sorry, that command is for True Ninjas only!\n");
    return 0;
  }

  if ((!nmode) && (comlist[cnum].sit & SIT_NINJAMODE)) {
    if (mind && ninja)
      mind->Send(u8"Sorry, you need to be in Ninja Mode[TM] to do that.\n");
    else if (mind)
      mind->Send(u8"Sorry, that command is for Ninjas only!\n");
    return 0;
  }

  if ((!(comlist[cnum].sit & SIT_ETHEREAL)) && (!body)) {
    if (mind)
      mind->Send(
          u8"You can't use that command until you join the game - with "
          u8"the 'enter' command.\n");
    return 0;
  }

  if ((!(comlist[cnum].sit & SIT_CORPOREAL)) && (body)) {
    if (mind)
      mind->Send(
          u8"You can't use that command until you quit the game - with "
          u8"the 'quit' command.\n");
    return 0;
  }

  if (body) {
    if (body->StillBusy() && (comlist[cnum].sit & SIT_ACTION)) {
      body->DoWhenFree(std::u8string(comlist[cnum].command) + u8" " + std::u8string(args));
      return 0;
    }
    if (comlist[cnum].sit & (SIT_ALIVE | SIT_AWAKE | SIT_ALERT)) {
      if (body->IsAct(act_t::DYING) || body->IsAct(act_t::DEAD)) {
        if (mind)
          mind->Send(u8"You must be alive to use that command.\n");
        return 0;
      }
    }
    if (body && (comlist[cnum].sit & SIT_CONSCIOUS)) {
      if (body->IsAct(act_t::UNCONSCIOUS)) {
        if (mind)
          mind->Send(u8"You can't do that, you are out cold.\n");
        return 0;
      }
    }
    if ((comlist[cnum].sit & (SIT_STAND | SIT_USE)) == (SIT_STAND | SIT_USE)) {
      if (body->Position() != pos_t::STAND && body->Position() != pos_t::USE) {
        if (mind)
          mind->Send(u8"You must stand up to use that command.\n");
        handle_single_command(body, u8"stand", mind);
        if (body->Position() != pos_t::STAND && body->Position() != pos_t::USE)
          return 0;
      }
    } else if ((comlist[cnum].sit & (SIT_STAND | SIT_SIT)) == (SIT_STAND | SIT_SIT)) {
      if (body->Position() == pos_t::USE) {
        if (mind)
          mind->Send(u8"You must stop using this skill to do that.\n");
        handle_single_command(body, u8"stop", mind);
        if (body->Position() != pos_t::STAND)
          return 0;
      } else if (body->Position() != pos_t::SIT && body->Position() != pos_t::STAND) {
        if (mind)
          mind->Send(u8"You must at least sit up to use that command.\n");
        handle_single_command(body, u8"sit", mind);
        if (body->Position() != pos_t::SIT && body->Position() != pos_t::STAND)
          return 0;
      }
    } else if (comlist[cnum].sit & SIT_STAND) {
      if (body->Position() == pos_t::USE) {
        if (mind)
          mind->Send(u8"You must stop using this skill to do that.\n");
        handle_single_command(body, u8"stop", mind);
        if (body->Position() != pos_t::STAND)
          return 0;
      } else if (body->Position() != pos_t::STAND) {
        if (mind)
          mind->Send(u8"You must stand up to use that command.\n");
        handle_single_command(body, u8"stand", mind);
        if (body->Position() != pos_t::STAND)
          return 0;
      }
    }
    if (comlist[cnum].sit & SIT_SIT) {
      if (body->Position() != pos_t::SIT) {
        if (mind)
          mind->Send(u8"You must sit to use that command.\n");
        handle_single_command(body, u8"sit", mind);
        if (body->Position() != pos_t::SIT)
          return 0;
      }
    }
    if (comlist[cnum].sit & SIT_ALERT) {
      if (body->IsAct(act_t::SLEEP)) {
        if (mind)
          mind->Send(u8"You must be awake to use that command.\n");
        handle_single_command(body, u8"wake", mind);
        if (body->IsAct(act_t::SLEEP))
          return 0;
      }
      if (body->IsAct(act_t::REST)) {
        if (mind)
          mind->Send(u8"You must be alert to use that command.\n");
        handle_single_command(body, u8"rest", mind);
        if (body->IsAct(act_t::REST))
          return 0;
      }
    }
    if (comlist[cnum].sit & SIT_AWAKE) {
      if (body->IsAct(act_t::SLEEP)) {
        if (mind)
          mind->Send(u8"You must be awake to use that command.\n");
        handle_single_command(body, u8"wake", mind);
        if (body->IsAct(act_t::SLEEP))
          return 0;
      }
    }
  }

  int stealth_t = 0, stealth_s = 0;
  if (body && body->IsUsing(prhash(u8"Stealth")) && body->Skill(prhash(u8"Stealth")) > 0) {
    stealth_t = body->Skill(prhash(u8"Stealth"));
    stealth_s = body->Roll(prhash(u8"Stealth"), 2);
  }

  if (cnum == COM_HELP) {
    if ((!mind) || (!mind->Owner()))
      return 0;
    if (args == u8"commands") {
      std::u8string mes = u8"";
      for (int ctr = 1; comlist[ctr].id != COM_MAX; ++ctr) {
        if (comlist[ctr].id > COM_LAST_STANDARD)
          continue;
        if ((comlist[ctr].sit & SIT_NINJAMODE) && (!nmode))
          continue;
        if ((!(comlist[ctr].sit & SIT_NINJAMODE)) && nmode)
          continue;
        if ((comlist[ctr].sit & SIT_NINJA) && (!ninja))
          continue;
        if ((comlist[ctr].sit & SIT_SUPERNINJA) && (!sninja))
          continue;
        if ((!(comlist[ctr].sit & SIT_CORPOREAL)) && (body))
          continue;
        if ((!(comlist[ctr].sit & SIT_ETHEREAL)) && (!body))
          continue;
        mes += comlist[ctr].command;
        mes += u8" - ";
        mes += comlist[ctr].shortdesc;
        mes += '\n';
      }
      mind->Send(mes);
      return 0;
    } else if (args == u8"socials") {
      std::u8string mes = u8"";
      for (int ctr = 1; comlist[ctr].id != COM_MAX; ++ctr) {
        if (comlist[ctr].id > COM_LAST_STANDARD)
          continue;
        if ((comlist[ctr].sit & SIT_NINJAMODE) && (!nmode))
          continue;
        if ((!(comlist[ctr].sit & SIT_NINJAMODE)) && nmode)
          continue;
        if ((comlist[ctr].sit & SIT_NINJA) && (!ninja))
          continue;
        if ((comlist[ctr].sit & SIT_SUPERNINJA) && (!sninja))
          continue;
        if ((!(comlist[ctr].sit & SIT_CORPOREAL)) && (body))
          continue;
        if ((!(comlist[ctr].sit & SIT_ETHEREAL)) && (!body))
          continue;
        mes += comlist[ctr].command;
        mes += u8" - ";
        mes += comlist[ctr].shortdesc;
        mes += '\n';
      }
      mind->Send(mes);
      return 0;
    }
    mind->Send(
        u8"Well, the help command's not really implemented yet :P\n"
        u8"Try 'help commands' for a list of general commands.\n"
        u8"Try 'help socials' for a list of social commands.\n");
    return 0;
  }

  if (cnum == COM_NINJAMODE) {
    if (!mind)
      return 0;

    Player* pl = mind->Owner();
    if (args.empty()) {
      mind->Send(u8"What command do you want to run in Ninja Mode[TM]?\n");
      mind->Send(u8"You need to include the command, like 'ninja junk boat'.\n");
    } else if (!pl) {
      mind->Send(u8"Sorry, you don't seem to be a player!\n");
    } else {
      pl->Set(PLAYER_NINJAMODE);
      mind->Send(u8"Ninja mode activated.\n");
      handle_single_command(body, std::u8string(args), mind);
      pl->UnSet(PLAYER_NINJAMODE);
      mind->Send(u8"Ninja mode deactivated.\n");
    }
    return 0;
  }

  if (cnum == COM_PRAY) {
    if (!mind)
      return 0;

    if (args.empty()) {
      mind->Send(u8"What command do you want to pray for?\n");
      mind->Send(u8"You need to include the command, like 'pray kill Joe'.\n");
    } else {
      // FIXME: Tell sub-command you're praying!
      body->Parent()->SendOut(
          stealth_t, stealth_s, u8";s prays.\n", u8"You pray.\n", body, nullptr);
      handle_single_command(body, std::u8string(args), mind);
    }
    return 0;
  }

  if (cnum == COM_LIST) {
    return handle_command_list(body, mind, cnum, args, stealth_t, stealth_s);
  }

  if (cnum == COM_BUY) {
    return handle_command_buy(body, mind, cnum, args, stealth_t, stealth_s);
  }

  if (cnum == COM_VALUE || cnum == COM_SELL) {
    return handle_command_shops(body, mind, cnum, args, stealth_t, stealth_s);
  }

  if (cnum == COM_CCREATE) {
    if (!mind)
      return 0;
    return handle_command_ccreate(body, mind, args, stealth_t, stealth_s);
  }

  if (cnum == COM_WLOAD) {
    if (!mind)
      return 0;
    return handle_command_wload(body, mind, args, stealth_t, stealth_s);
  }

  if (cnum > COM_LAST_STANDARD) {
    return handle_social_command(body, mind, cnum, args, stealth_t, stealth_s);
  }

  return handle_command_other(body, mind, cnum, args, stealth_t, stealth_s);
}

int handle_command(Object* body, const std::u8string_view& cl, std::shared_ptr<Mind> mind) {
  int ret = 0;

  if (mind && !mind->SpecialPrompt().empty()) {
    std::u8string cmd = fmt::format(u8"{} {}", mind->SpecialPrompt(), cl);
    ret = handle_single_command(body, cmd, mind);
    return ret;
  }

  auto start = cl.find_first_not_of(u8"; \t\r\n");
  while (start != std::u8string::npos) {
    auto end = cl.find_first_of(u8";\r\n", start + 1);

    std::u8string_view single(cl);
    if (end != std::u8string::npos) {
      single = single.substr(start, end - start);
    } else {
      single = single.substr(start);
    }

    int stat = handle_single_command(body, std::u8string(single), mind);
    if (stat < 0)
      return stat;
    else if (ret == 0)
      ret = stat;
    if (end != std::u8string::npos) {
      start = cl.find_first_not_of(u8"; \t\r\n", end + 1);
    } else {
      start = std::u8string::npos;
    }
  }
  return ret;
}
